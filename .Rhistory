choose(n,i) * p^i * (1-p)^(n-i)
}
?binom
?rbinom
bfmp(15,0.7,5)
dbinom(5,15,0.7)
dbinom(c(0,1,2,3,4,5),15,0.7)
bfmp <- function(i,n,p){
choose(n,i) * p^i * (1-p)^(n-i)
}
bfmp(c(0,1,2,3,4,5),15,0.7)
bfda <- function(i,n,p){
sum(bfmp(0:i,n,p))
}
pbinom(c(0,1,2,3,4,5),15,0.7)
bfda(c(0,1,2,3,4,5),15,0.7)
bfmp(0:i,n,p)
bfmp(0:5,15,0.7)
pbinom(0:15,15,0.7)
bfda <- function(i,n,p){
for(j in i)
sum(bfmp(0:i,n,p))
}
bfda(0:15,15,0.7)
bfda <- function(i,n,p){
resultado <- NULL
for(j in i)
resultado <- c(resulto,sum(bfmp(0:i,n,p)))
resultado
}
bfda(0:15,15,0.7)
bfda <- function(i,n,p){
resultado <- NULL
for(j in i)
resultado <- c(resultado,sum(bfmp(0:i,n,p)))
resultado
}
bfda(0:15,15,0.7)
bfda <- function(i,n,p){
resultado <- NULL
for(j in i)
resultado <- c(resultado,sum(bfmp(0:j,n,p)))
resultado
}
bfda(0:15,15,0.7)
pbinom(0:15,15,0.7)
plot(0:15,bfmp(0:15,15,0.7))
plot(0:15,bfmp(0:15,15,0.7),pch = 1)
plot(0:15,bfmp(0:15,15,0.7),pch = 2)
plot(0:15,bfmp(0:15,15,0.7),pch = 3)
plot(0:15,bfmp(0:15,15,0.7),pch = 4)
plot(0:15,bfmp(0:15,15,0.7),pch = 5)
plot(0:15,bfmp(0:15,15,0.7),pch = 6)
plot(0:15,bfmp(0:15,15,0.7),pch = 7)
plot(0:15,bfmp(0:15,15,0.7),pch = 8)
plot(0:15,bfmp(0:15,15,0.7),pch = 9)
plot(0:15,bfmp(0:15,15,0.7),pch = 10)
plot(0:15,bfmp(0:15,15,0.7),pch = 11)
plot(0:15,bfmp(0:15,15,0.7),pch = 12)
plot(0:15,bfmp(0:15,15,0.7),pch = 13)
plot(0:15,bfmp(0:15,15,0.7),pch = 14)
plot(0:15,bfmp(0:15,15,0.7),pch = 15)
plot(0:15,bfmp(0:15,15,0.7),pch = 16)
plot(0:15,bfmp(0:15,15,0.7),pch = 17)
plot(0:15,bfmp(0:15,15,0.7),pch = 16)
lines(0:15,bfmp(0:15,15,0.7),pch = 16)
plot(0:15,bfmp(0:15,15,0.7),pch = 16)
plot(0:15,bfmp(0:15,15,0.7),pch = 16,
main="Función de densidad de probabilidades",
xlab="x",
ylab="P(X=x)")
plot(0:15,bfda(0:15,15,0.7),pch = 16,
main="Función de densidad de probabilidades",
xlab="x",
ylab="P(X=x)")
plot(0:15,bfda(0:15,15,0.7),pch = 17,
main="Función de densidad de probabilidades",
xlab="x",
ylab="P(X=x)")
plot(0:15,bfda(0:15,15,0.7),pch = 18,
main="Función de densidad de probabilidades",
xlab="x",
ylab="P(X=x)")
plot(0:15,bfda(0:15,15,0.7),pch = 19,
main="Función de densidad de probabilidades",
xlab="x",
ylab="P(X=x)")
plot(0:15,bfda(0:15,15,0.7),pch = 20,
main="Función de densidad de probabilidades",
xlab="x",
ylab="P(X=x)")
plot(0:15,bfda(0:15,15,0.7),pch = 20,
main="Función de distribución acumulada",
xlab="x",
ylab="P(X<=x)")
plot(stepfun(1:15,bfda(0:15,15,0.7)),pch = 20,
main="Función de distribución acumulada",
xlab="x",
ylab="P(X<=x)")
grid()
#Ejercicio 4.0.1. Gráficas de las distribución binomial.
#Generalmente recurriremos a funciones ya instrumentadas en alguna librería
#de R para obtener probabilidades, pues éstas han sido programadas y revisadas
#por expertos. En este ejercicio se contruyen algunas funciones sólo con fines didácticos.
#Función masa de probabilidad
bfmp <- function(i,n,p){
choose(n,i) * p^i * (1-p)^(n-i)
}
#Podemos usar directamente la función dbinom en lugar de crear
#la función masa de probabilidades bfmp
#Función de distribución acumulada
bfda <- function(i,n,p){
resultado <- NULL
for(j in i)
resultado <- c(resultado,sum(bfmp(0:j,n,p)))
resultado
}
#Nuevamente, no es necesario crear esta función, en R existe la función pbinom
#que calcula las probabilidades acumuladas.
#Gráfica de la función masa/densidad de probabilidades, n=15, p=0.7
plot(0:15,bfmp(0:15,15,0.7),pch = 20,
main="Función de densidad de probabilidades",
xlab="x",
ylab="P(X=x)")
grid()
#Gráfica de la función de distribución acumulada, n=15, p=0.7
plot(0:15,bfda(0:15,15,0.7),pch = 20,
main="Función de distribución acumulada",
xlab="x",
ylab="P(X<=x)")
grid()
#Gráfica usando una stepfun, función escalonada
plot(stepfun(1:15,bfda(0:15,15,0.7)),pch = 20,
main="Función de distribución acumulada",
xlab="x",
ylab="P(X<=x)")
grid()
dat <- read.csv("activity.csv")
dat$date <- as.character(dat$date)
dat$date <- as.Date(dat$date,format = "%Y-%m-%d")
str(dat)
setwd("D:/Marco/Cursos/Data Science/04 Reproducible research/W2/Peer Assignment/RepData_PeerAssessment1")
dat <- read.csv("activity.csv")
dat$date <- as.character(dat$date)
dat$date <- as.Date(dat$date,format = "%Y-%m-%d")
str(dat)
q1dat <- dat[!is.na(dat$steps),]#ignoring the missing values in the dataset
#total number of steps taken per day
totSteps <- lapply(split(q1dat,q1dat$date),function(y){sum(y$steps)})
totSteps <- unlist(totSteps)
```
Making an histogram of the total number of steps taken each day
```{r echo=TRUE,fig.height=4}
hist(totSteps,breaks = 5,
main = "Histogram of the total number of steps taken each day",
xlab="Total number of steps")
dat <- read.csv("activity.csv")
dat$date <- as.character(dat$date)
dat$date <- as.Date(dat$date,format = "%Y-%m-%d")
str(dat)
q1dat <- dat[!is.na(dat$steps),]#ignoring the missing values in the dataset
#total number of steps taken per day
totSteps <- lapply(split(q1dat,q1dat$date),function(y){sum(y$steps)})
totSteps <- unlist(totSteps)
hist(totSteps,breaks = 5,
main = "Histogram of the total number of steps taken each day",
xlab="Total number of steps")
mean(totSteps)
median(totSteps)
q2dat <- dat[!is.na(dat$steps),]#ignoring the missing values in the dataset
#average number of steps taken, by 5-minute interval
avSteps <- lapply(split(q2dat,q2dat$interval),function(y){sum(y$steps)})
avSteps <- unlist(avSteps)
#ploting time series
plot(x = as.numeric(names(avSteps)),y = avSteps,type="l",
main="Average number of steps taken, by 5-minute interval",
xlab="5-minute interval",
ylab="Average number of steps")
interval <- names(avSteps)[which.max(avSteps)]
interval
steps <- avSteps[which.max(avSteps)]
steps
is.na(dat)
sum(is.na(dat))
sum(is.na(dat))
sum(apply(dat,1,function(y) {suma(is.na(y)})>0)
sum(apply(dat,1,function(y) {suma(is.na(y)})>0))
sum(apply(dat,1,function(y) {suma(is.na(y))>0}))
sum(apply(dat,1,function(y) {suma(is.na(y))>0})
)
apply(dat,1,function(y) {suma(is.na(y))>0})
sum(apply(dat,1,function(y) {sum(is.na(y))>0}))
sum(apply(dat,1,function(y) {sum(is.na(y))>0}))
is.na(dat)
sum(apply(dat,1,function(y) {sum(is.na(y))>0}))
sum(is.na(dat))
dat[!is.na(dat$steps),"steps"]
dat[is.na(dat$steps),"steps"]
meanSteps <- lapply(split(q1dat,q1dat$date),function(y){mean(y$steps)})
newDat <- dat
newDat[is.na(newDat$steps),"steps"] <- meanSteps[is.na(newDat$steps)]
meanSteps <- unlist(meanSteps)
newDat <- dat
newDat[is.na(newDat$steps),"steps"] <- meanSteps[is.na(newDat$steps)]
is.na(newDat$steps)
meanSteps[is.na(newDat$steps)]
head(meanSteps)
meanSteps[is.na(newDat$steps)]
newDat[is.na(newDat$steps),"steps"] <- meanSteps[is.na(Dat$steps)]
newDat[is.na(newDat$steps),"steps"] <- meanSteps[is.na(dat$steps)]
newDat[is.na(newDat$steps),"steps"] <- meanSteps[is.na(dat$steps)]
meanSteps[is.na(dat$steps)]
is.na(dat$steps)
meanSteps[which(is.na(dat$steps))]
which(is.na(dat$steps))
head(meanSteps)
meanSteps["2012-10-03"]
newDat <- apply(dat,1,function(y){
if(is.na(y$steps))
y$steps <- meanSteps[y$date]
})
str(dat)
newDat <- apply(dat,1,function(y){
if(is.na(y[1]))#if there is a missing value
y[1] <- meanSteps[y[3]]
})
sum(is.na(newDat))
newDat <- apply(dat,1,function(y){
if(is.na(y[1]))#if there is a missing value
y[1] <- meanSteps[y[3]]
})
sum(is.na(newDat))
missing
miss<-sum(apply(dat,1,function(y) {sum(is.na(y))>0}))
miss
head(newDat)
newDat <- unlist(apply(dat,1,function(y){
if(is.na(y[1]))#if there is a missing value
y[1] <- meanSteps[y[3]]
}))
head(newDat)
head(dat)
newDat <- unlist(apply(dat,1,function(y){
if(is.na(y[1]))#if there is a missing value
y[1] <- meanSteps[y[3]]
y
}))
head(newDat)
newDat <- t(unlist(apply(dat,1,function(y){
if(is.na(y[1]))#if there is a missing value
y[1] <- meanSteps[y[3]]
y
})))
head(newDat)
newDat <- dat
for(i in 1:nrow(newDat))
if(is.na(newDat$steps[i]))
newDat$steps[i] <- meanSteps[newDat$date[i]]
sum(is.na(newDat))
head(newDat)
nrow(newDat)
i=1
newDat$steps[i]
meanSteps[newDat$date[i]]
newDat$date[i]
head(meanSteps)
interval
avSteps
avSteps[which.max(avSteps)]
avSteps
head(avSteps)
avSteps[5]
avSteps["5"]
str(newdate)
str(newDate)
str(newDat)
newDat <- dat
for(i in 1:nrow(newDat))
if(is.na(newDat$steps[i]))
newDat$steps[i] <- avSteps[as.character(newDat$interval[i])]
sum(is.na(newDat))
head(newDat)
head(newDat)
str(newDat)
str(dat)
totSteps
summary(totSteps)
hist(totSteps,breaks = 5,
main = "Histogram of the total number of steps taken each day",
xlab="Total number of steps")
mean(totSteps)
median(totSteps)
dat <- read.csv("activity.csv")
dat$date <- as.character(dat$date)
dat$date <- as.Date(dat$date,format = "%Y-%m-%d")
str(dat)
q1dat <- dat[!is.na(dat$steps),]#ignoring the missing values in the dataset
#total number of steps taken per day
totSteps <- lapply(split(q1dat,q1dat$date),function(y){sum(y$steps)})
totSteps <- unlist(totSteps)
```
hist(totSteps,breaks = 5,
main = "Histogram of the total number of steps taken each day",
xlab="Total number of steps")
mean(totSteps)
median(totSteps)
q2dat <- dat[!is.na(dat$steps),]#ignoring the missing values in the dataset
#average number of steps taken, by 5-minute interval
avSteps <- lapply(split(q2dat,q2dat$interval),function(y){sum(y$steps)})
avSteps <- unlist(avSteps)
#ploting time series
plot(x = as.numeric(names(avSteps)),y = avSteps,type="l",
main="Average number of steps taken, by 5-minute interval",
xlab="5-minute interval",
ylab="Average number of steps")
interval <- names(avSteps)[which.max(avSteps)]
interval
steps <- avSteps[which.max(avSteps)]
steps
miss<-sum(apply(dat,1,function(y) {sum(is.na(y))>0}))
miss
meanSteps <- lapply(split(q1dat,q1dat$date),function(y){mean(y$steps)})
meanSteps <- unlist(meanSteps)
newDat <- dat
for(i in 1:nrow(newDat))
if(is.na(newDat$steps[i]))
newDat$steps[i] <- avSteps[as.character(newDat$interval[i])]
#checking that there are not more missing values in the new data set
sum(is.na(newDat))
q3dat <- newDat
#total number of steps taken per day
totSteps <- lapply(split(q3dat,q3dat$date),function(y){sum(y$steps)})
totSteps <- unlist(totSteps)
hist(totSteps,breaks = 5,
main = "Histogram of the total number of steps taken each day",
xlab="Total number of steps")
head(newDat)
summary(totSteps)
hist(totSteps,breaks = 5,
main = "Histogram of the total number of steps taken each day",
xlab="Total number of steps")
mean(totSteps)
median(totSteps)
newDat <- dat
head(newDat)
i=5
is.na(newDat$steps[i])
avSteps[as.character(newDat$interval[i])]
summary(avSteps)
str(avSteps)
summary(avSteps)
as.character(newDat$interval[i])
avSteps[as.character(newDat$interval[i])]
newDat$steps[i]
newDat$steps[i] <- avSteps[as.character(newDat$interval[i])]
newDat$steps[i]
newDat <- dat
for(i in 1:nrow(newDat))
if(is.na(newDat$steps[i])){
newDat$steps[i] <- avSteps[as.character(newDat$interval[i])]
}
sum(is.na(newDat))
q3dat <- newDat
totSteps <- lapply(split(q3dat,q3dat$date),function(y){sum(y$steps)})
totSteps <- unlist(totSteps)
summary(totSteps)
hist(totSteps,breaks = 5,
main = "Histogram of the total number of steps taken each day",
xlab="Total number of steps")
dat <- read.csv("activity.csv")
dat$date <- as.character(dat$date)
dat$date <- as.Date(dat$date,format = "%Y-%m-%d")
str(dat)
q1dat <- dat[!is.na(dat$steps),]#ignoring the missing values in the dataset
#total number of steps taken per day
totSteps <- lapply(split(q1dat,q1dat$date),function(y){sum(y$steps)})
totSteps <- unlist(totSteps)
summary(totSteps)
hist(totSteps,breaks = 5,
main = "Histogram of the total number of steps taken each day",
xlab="Total number of steps")
mean(totSteps)
median(totSteps)
q2dat <- dat[!is.na(dat$steps),]#ignoring the missing values in the dataset
avSteps <- lapply(split(q2dat,q2dat$interval),function(y){sum(y$steps)})
avSteps <- unlist(avSteps)
plot(x = as.numeric(names(avSteps)),y = avSteps,type="l",
main="Average number of steps taken, by 5-minute interval",
xlab="5-minute interval",
ylab="Average number of steps")
interval <- names(avSteps)[which.max(avSteps)]
interval
steps <- avSteps[which.max(avSteps)]
steps
miss<-sum(apply(dat,1,function(y) {sum(is.na(y))>0}))
miss
summary(avSteps)
summaru(newDat$steps)
summary(newDat$steps)
newDat <- dat
summary(newDat$steps)
summary(newDat$steps)
str(avSteps)
summary(avSteps)
head(avSteps)
for(i in 1:nrow(newDat))
if(is.na(newDat$steps[i])){
newDat$steps[i] <- avSteps[as.character(newDat$interval[i])]
}
summary(newDat$steps)
summary(dat$steps)
head(newDat)
head(newDat,100)
head(dat,100)
summary(dat$steps)
avSteps <- lapply(split(q2dat,q2dat$interval),function(y){mean(y$steps)})
avSteps <- unlist(avSteps)
summary(avSteps)
newDat <- dat
for(i in 1:nrow(newDat))
if(is.na(newDat$steps[i])){
newDat$steps[i] <- avSteps[as.character(newDat$interval[i])]
}
sum(is.na(newDat))
q3dat <- newDat
totSteps <- lapply(split(q3dat,q3dat$date),function(y){sum(y$steps)})
totSteps <- unlist(totSteps)
hist(totSteps,breaks = 5,
main = "Histogram of the total number of steps taken each day",
xlab="Total number of steps")
mean(totSteps)
median(totSteps)
?weekdays
weekdays("2015-02-15")
weekdays(as.Date("2015-02-15"))
weekdays(as.Date("2015-02-15"),abbreviate = "T")
weekdays(as.Date("2015-02-16"),abbreviate = "T")
weekdays(as.Date("2015-02-14"),abbreviate = "T")
weekdays(as.Date("2015-02-14"),abbreviate = "f")
weekdays(as.Date("2015-02-14"))
weekdays(as.Date("2015-02-15"))
q5 <- newDat
newColumn <- weekdays(q5$date)
head(newColumn)
newColumn <- weekdays(q5$date)
newColum[weekdays(q5$date) == "sábado" || weekdays(q5$date) == "domingo"] <- "Weekend"
newColumn <- weekdays(q5$date)
newColumn[weekdays(q5$date) == "sábado" || weekdays(q5$date) == "domingo"] <- "Weekend"
newColumn[weekdays(q5$date) != "sábado" && weekdays(q5$date) != "domingo"] <- "Weekday"
head(newColumn)
head(newColumn,100)
head(newColumn,1000)
head(newColumn,10000)
weekdays(q5$date) == "sábado" || weekdays(q5$date) == "domingo"
weekdays(q5$date) == "sábado"
which(weekdays(q5$date) == "sábado" || weekdays(q5$date) == "domingo")
weekdays(q5$date) == "sábado" || weekdays(q5$date) == "domingo")
weekdays(q5$date) == "sábado" || weekdays(q5$date) == "domingo")
weekdays(q5$date) == "sábado" || weekdays(q5$date) == "domingo"
weekdays(q5$date) == "sábado" | weekdays(q5$date) == "domingo"
newColumn[which(weekdays(q5$date) == "sábado" | weekdays(q5$date) == "domingo")] <- "Weekend"
newColumn[weekdays(q5$date) != "sábado" & weekdays(q5$date) != "domingo"] <- "Weekday"
head(newColumn,10000)
q5 <- cbind(q5,newColumn)
head(q5)
str(q5)
library(lattice)
datForPlot <- split(q5,q5$newColumn)
str(datForPlot[1])
avStweekend <- lapply(split(datForPlot[1],datForPlot[1]$interval),function(y){mean(y$steps)})
datForPlot[1]
datForPlot <- split(q5,q5$newColumn)
avStweekend <- lapply(split(datForPlot[1],datForPlot[1]$interval),function(y){mean(y$steps)})
datForPlot[1]$interval
datForPlot[[1]]$interval
datForPlot[[1]]
avStweekend <- lapply(split(datForPlot[[1]],datForPlot[[1]]$interval),function(y){mean(y$steps)})
avStweekend <- unlist(avStweekend)
summary(avStweekend)
avStweekday <- lapply(split(datForPlot[[2]],datForPlot[[2]]$interval),function(y){mean(y$steps)})
avStweekday <- unlist(avStweekday)
summary(avStweekday)
library(lattice)
par(mfrow=c(2,1))
datForPlot <- split(q5,q5$newColumn)
avStweekend <- lapply(split(datForPlot[[1]],datForPlot[[1]]$interval),function(y){mean(y$steps)})
avStweekend <- unlist(avStweekend)
avStweekday <- lapply(split(datForPlot[[2]],datForPlot[[2]]$interval),function(y){mean(y$steps)})
avStweekday <- unlist(avStweekday)
plot(x = as.numeric(names(avStweekend)),y = avStweekend,type="l",
main="Average number of steps taken, by 5-minute interval in Weekend",
xlab="5-minute interval",
ylab="Average number of steps")
plot(x = as.numeric(names(avStweekday)),y = avStweekday,type="l",
main="Average number of steps taken, by 5-minute interval in weekday",
xlab="5-minute interval",
ylab="Average number of steps")
plot(x = as.numeric(names(avStweekend)),y = avStweekend,type="l",
main="Average number of steps taken, by 5-minute interval in Weekend",
xlab="5-minute interval",
ylab="Average number of steps")
names(avStweekend)
avStweekend
detach("package:lattice", unload=TRUE)
plot(x = as.numeric(names(avStweekend)),y = avStweekend,type="l",
main="Average number of steps taken, by 5-minute interval in Weekend",
xlab="5-minute interval",
ylab="Average number of steps")
plot(x = as.numeric(names(avStweekday)),y = avStweekday,type="l",
main="Average number of steps taken, by 5-minute interval in weekday",
xlab="5-minute interval",
ylab="Average number of steps")
